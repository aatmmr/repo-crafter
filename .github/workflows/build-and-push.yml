name: Build and Push Container

on:
  push:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Run tests
        run: npm test

  containerize:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: containerize
    runs-on: ubuntu-latest
    permissions:
      contents: read
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.0

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Import Existing Resources
        run: |
          # Check if resource group exists and import if needed
          ENVIRONMENT="prod"
          RG_NAME="rg-repo-crafter-${ENVIRONMENT}"
          SUBSCRIPTION_ID="5d9a229f-3bb4-46fb-9995-4d0625c98a34"
          
          # Check if resource exists in Azure
          if az group show --name "$RG_NAME" --subscription "$SUBSCRIPTION_ID" >/dev/null 2>&1; then
            echo "Resource group $RG_NAME exists, attempting import..."
            terraform import azurerm_resource_group.repo_crafter "/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RG_NAME" || echo "Resource already imported or import failed"
          else
            echo "Resource group $RG_NAME does not exist, will be created by Terraform"
          fi
        working-directory: ./terraform

      - name: Terraform Plan
        run: |
          terraform plan \
            -var="environment=prod" \
            -var="use_existing_rg=true" \
            -var="container_tag=main-${{ github.sha }}" \
            -var="github_app_id=${{ secrets.REPOCRAFTER_APP_ID }}" \
            -var="github_private_key=${{ secrets.REPOCRAFTER_PRIVATE_KEY }}" \
            -var="github_webhook_secret=${{ secrets.REPOCRAFTER_WEBHOOK_SECRET }}" \
            -var="github_client_id=${{ secrets.REPOCRAFTER_CLIENT_ID }}" \
            -var="github_client_secret=${{ secrets.REPOCRAFTER_CLIENT_SECRET }}" \
            -var="repo_crafter_api_key=${{ secrets.REPO_CRAFTER_API_KEY }}" \
            -out=tfplan
        working-directory: ./terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: ./terraform

      - name: Output Web App URL
        run: terraform output web_app_url
        working-directory: ./terraform
